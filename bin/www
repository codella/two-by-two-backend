#!/usr/bin/env node

/**
 * Module dependencies.
 */

const createApp = require("../app");
const registerSocketEventHandlers = require("../messaging/registerSocketEventHandlers");
const debug = require("debug")("backend:server");
const http = require("http");
const createSocketServer = require("socket.io");

const EventsRepository = require("../repositories/events");
const GamesRepository = require("../repositories/games");
const PlayersRepository = require("../repositories/players");

/**
 * Initializing dependencies
 */

// We don't need to have a real D for the purpose of this exercise,
// so I'll go with a simple object.
const db = {};

// configure the repositories
const eventsRepository = new EventsRepository(db);
const gamesRepository = new GamesRepository(db);
const playersRepository = new PlayersRepository(db);

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || "3001");
const app = createApp({ gamesRepository, playersRepository, eventsRepository });
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Create Socket.io server
 */

const io = createSocketServer(server);
io.on("connection", function(socket) {
  registerSocketEventHandlers({ gamesRepository, playersRepository, eventsRepository })(io)(socket);
  socket.on("disconnected", function() {
    console.info(`socket '${socket.id}' disconnected`);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
